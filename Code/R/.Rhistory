logistic.fit.ridge <- cv.glmnet(x.train, y.train, family = "binomial", alpha = 0, lambda = grid, nfolds = x.train.rows)
plot(logistic.fit.ridge, xvar="lambda", label=TRUE)
bestlam.ridge <- logistic.fit.ridge$lambda.min
x.test <- data.matrix(subset(df_qbs_test_scaled, select = -c(franchise_qb)))
y.test <- data.matrix(df_qbs_test_scaled[, c('franchise_qb')])
logistic.ridge.preds <- predict(logistic.fit.ridge, s = bestlam.ridge, newx = x.test, type = "class")
logistic.ridge.preds
logistic.ridge.confusion <- confusionMatrix(as.factor(logistic.ridge.preds), as.factor(y.test), mode="everything", positive = "1")
logistic.ridge.confusion
accuracy.logistic.ridge <- c("Logistic Regression Ridge Regression", logistic.ridge.confusion$overall[["Accuracy"]])
coef(logistic.fit.ridge, s = bestlam.ridge)
### Elastic Net
grid <- 10^seq (-0.75, -3, length = 500)
logistic.fit.elastic <- cv.glmnet(x.train, y.train, family = "binomial", alpha = 0.5, lambda = grid, nfolds = x.train.rows)
plot(logistic.fit.elastic, xvar="lambda", label=TRUE)
bestlam.elastic <- logistic.fit.elastic$lambda.min
x.test <- data.matrix(subset(df_qbs_test_scaled, select = -c(franchise_qb)))
y.test <- data.matrix(df_qbs_test_scaled[, c('franchise_qb')])
logistic.elastic.preds <- predict(logistic.fit.elastic, s = bestlam.elastic, newx = x.test, type = "class")
logistic.elastic.preds
logistic.elastic.confusion <- confusionMatrix(as.factor(logistic.elastic.preds), as.factor(y.test), mode="everything", positive = "1")
logistic.elastic.confusion
accuracy.logistic.elastic <- c("Logistic Regression Elastic Net", logistic.elastic.confusion$overall[["Accuracy"]])
coef(logistic.fit.elastic, s = bestlam.ridge)
## Random Forest
### Need to remove NA rows. Unfortunately, the CPOE data only goes back to 2006 and removes some players that are still playing today.
### Jalen Hurts is more recent and has full CPOE stats.
df_qbs_train_nas_rm <- na.omit(df_qbs_train)
x.train <- data.matrix(subset(df_qbs_train_nas_rm, select = -c(franchise_qb)))
y.train <- data.matrix(df_qbs_train_nas_rm[, c('franchise_qb')])
df_qbs_test_na_rm <- na.omit(df_qbs_test[, pred_vars])
x.test <- data.matrix(subset(df_qbs_test_na_rm, select = -c(franchise_qb)))
y.test <- data.matrix(df_qbs_test_na_rm[, c('franchise_qb')])
set.seed(581)
rf.fit <- randomForest(franchise_qb ~ ., data = df_qbs_train_nas_rm[, pred_vars], importance=TRUE, ntree=1000)
rf.pred <- predict(rf.fit, newdata = df_qbs_test_na_rm)
rf.confusion <- confusionMatrix(rf.pred, as.factor(y.test), mode = "everything", positive = "1")
rf.confusion
accuracy.rf <- c("Random Forest", rf.confusion$overall[["Accuracy"]])
importance(rf.fit)
varImpPlot(rf.fit)
## XGBoost
x.train <- data.matrix(subset(df_qbs_train, select = -c(franchise_qb)))
y.train <- data.matrix(df_qbs_train[, c('franchise_qb')])
x.test <- data.matrix(subset(df_qbs_test, select = -c(franchise_qb)))
y.test <- data.matrix(df_qbs_test[, c('franchise_qb')])
dtrain <- xgb.DMatrix(data = x.train,label = y.train)
dtest <- xgb.DMatrix(data = x.test, label = y.test)
hyper_grid <- expand.grid(max_depth = seq(2, 6, 1), eta = seq(.1, .4, .005))
xgb_train_logloss <- NULL
xgb_test_logloss <- NULL
for (j in 1:nrow(hyper_grid)) {
set.seed(581)
m_xgb_untuned <- xgb.cv(
data = dtrain,
nrounds = 1000,
objective = "binary:logistic",
early_stopping_rounds = 3,
nfold = x.train.rows,
max_depth = hyper_grid$max_depth[j],
eta = hyper_grid$eta[j]
)
xgb_train_logloss[j] <- m_xgb_untuned$evaluation_log$train_logloss_mean[m_xgb_untuned$best_iteration]
xgb_test_logloss[j] <- m_xgb_untuned$evaluation_log$test_logloss_mean[m_xgb_untuned$best_iteration]
cat(j, "\n")
}
## Pulling the tuned parameters.
best_max_depth <- hyper_grid[which.min(xgb_test_logloss), ]$max_depth
best_eta <- hyper_grid[which.min(xgb_test_logloss), ]$eta
set.seed(581)
m1_xgb <-
xgboost(
data = dtrain,
nrounds = 1000,
objective = "binary:logistic",
early_stopping_rounds = 3,
max_depth = best_max_depth,
eta = best_eta
)
xg.pred <- predict(m1_xgb, dtest)
xg.pred.labels <- as.factor(ifelse(xg.pred > 0.5,"1","0"))
xgb.confusion <- confusionMatrix(xg.pred.labels, as.factor(y.test), mode = "everything", positive = "1")
xgb.confusion
accuracy.xgb <- c("XGBoost", xgb.confusion$overall[["Accuracy"]])
importance_matrix = xgb.importance(colnames(dtrain), model = m1_xgb)
xgb.plot.importance(importance_matrix)
# Model Selection
df_accuracy <- data.frame(rbind(accuracy.logistic.elastic,
accuracy.logistic.lasso,
accuracy.logistic.ridge,
accuracy.rf,
accuracy.xgb))
colnames(df_accuracy) <- c("Model", "Overall Accuracy")
df_accuracy$`Overall Accuracy` <- as.numeric(df_accuracy$`Overall Accuracy`)
df_accuracy %>% arrange(desc(`Overall Accuracy`))
ggplot(df_accuracy, aes(x = `Overall Accuracy`, y = reorder(Model, `Overall Accuracy`))) + geom_bar(stat = "identity") +
ylab("Predictive Model")
# Predictions
df_qbs_hurts <- df_prim %>% filter(passer_player_id == '00-0036389')
rownames(df_qbs_hurts) <- df_qbs_hurts$passer_player_id
df_qbs_hurts[, colnames(df_qbs_hurts) %in% pred_vars]
df_qbs_hurts_scaled <- predict(normParam, df_qbs_hurts[, colnames(df_qbs_hurts) %in% pred_vars])
x.hurts <- data.matrix(df_qbs_hurts_scaled)
predict(logistic.fit.lasso, s = bestlam.lasso, newx = x.hurts, type = "class")
predict(logistic.fit.lasso, s = bestlam.lasso, newx = x.hurts, type = "response")
library(bestglm)
library(caret)
library(dplyr)
library(leaps)
library(glmnet)
library(ggpubr)
library(psych) # For EDA
library(tidyverse)
db <- 'nfl'
host_db <- Sys.getenv(x = 'POSTGRES_HOST')
db_port <- Sys.getenv(x = 'POSTGRES_PORT')
db_user <- Sys.getenv(x = 'POSTGRES_USER')
db_pass <- Sys.getenv(x = 'POSTGRES_PASS')
con <- dbConnect(RPostgres::Postgres(), dbname = db, host=host_db, port=db_port, user=db_user, password=db_pass)
## Pull the primary passer stats with a limit on Hurts minimum/maximum
df_qb_contracts <- dbGetQuery(con, "select * from public.primary_passer_stats_hurts_maximum_contracts")
dbDisconnect(con)
## Need to convert the point differential into numeric
df_qb_contracts <- df_qb_contracts %>% mutate(net_point_differential_change = as.numeric(net_point_differential_change))
## Pull Hurts into his own dataframe, then filter him out of the primary dataset.
df_qb_contracts_hurts <- df_qb_contracts %>% filter(passer_player_id == '00-0036389')
df_qb_contracts <- df_qb_contracts %>% filter(passer_player_id != '00-0036389')
# EDA
### Only including the variables we want to consider for prediction.
pred_vars <- c("fumbles_per_attempt", "interceptions_per_attempt", "passing_yards_per_attempt", "passing_completion_percentage", "mean_cpoe", "rushing_yards_per_attempt", "primary_passing_tds_per_game", "primary_rushing_tds_per_game", "sacks_per_play", "interceptions_per_attempt", "fumbles_per_attempt", "turnovers_per_attempt", "epa_per_play", "net_win_percentage_change", "net_point_differential_change", "days_to_hurts_game")
response_vars <- c("years", "inflated_value", "inflated_apy", "inflated_guaranteed")
all_vars <- c(pred_vars, response_vars)
## Pulling summary statistics and writing to a CSV file to combine with the Word report.
eda_df_qb_contracts <- describe(df_qb_contracts[, names(df_qb_contracts) %in% pred_vars], fast=TRUE)
write.csv(eda_df_qb_contracts[order(row.names(eda_df_qb_contracts)), ], "..\\..\\Report\\qb_contracts_eda.csv")
## Histograms of QB Features
num_cols <- colnames(select_if(df_qb_contracts, is.numeric))
nbins = 10
for(i in num_cols){
assign(paste('plot_',i,sep=""),
ggplot(data=df_qb_contracts, aes_string(x=i)) + geom_histogram(bins = nbins) + xlab(str_to_title(gsub("_"," ",i))) + theme(text = element_text(size = 8))
)
}
ggarrange(
plot_days_to_hurts_game,
plot_fumbles_per_attempt,
plot_interceptions_per_attempt,
plot_passing_yards_per_attempt,
plot_passing_completion_percentage,
plot_mean_cpoe,
plot_rushing_yards_per_attempt,
plot_primary_passing_tds_per_game,
plot_primary_rushing_tds_per_game,
plot_sacks_per_play,
plot_interceptions_per_attempt,
plot_fumbles_per_attempt,
plot_turnovers_per_attempt,
plot_epa_per_play,
plot_net_win_percentage_change,
plot_net_point_differential_change
)
### Found that including QBs with `days_to_hurts_game` > 2000 brings in veteran QBs. Filtering them out and attempting histograms again.
df_qb_contracts_nonvets <- df_qb_contracts %>% filter(days_to_hurts_game < 2000)
for(i in num_cols){
assign(paste('plot_',i,sep=""),
ggplot(data=df_qb_contracts_nonvets, aes_string(x=i)) + geom_histogram(bins = nbins) + xlab(str_to_title(gsub("_"," ",i))) + theme(text = element_text(size = 8))
)
}
ggarrange(
plot_days_to_hurts_game,
plot_fumbles_per_attempt,
plot_interceptions_per_attempt,
plot_passing_yards_per_attempt,
plot_passing_completion_percentage,
plot_mean_cpoe,
plot_rushing_yards_per_attempt,
plot_primary_passing_tds_per_game,
plot_primary_rushing_tds_per_game,
plot_sacks_per_play,
plot_interceptions_per_attempt,
plot_fumbles_per_attempt,
plot_turnovers_per_attempt,
plot_epa_per_play,
plot_net_win_percentage_change,
plot_net_point_differential_change
)
# Train/Test Split
set.seed(581)
spec = c(train = .8, test = .2)
g = sample(cut(
seq(nrow(df_qb_contracts_nonvets)),
nrow(df_qb_contracts_nonvets)*cumsum(c(0,spec)),
labels = names(spec)
))
res = split(df_qb_contracts_nonvets, g)
df_qb_contracts_train <- res$train[ , all_vars]
df_qb_contracts_test <- res$test[ , all_vars]
# Training and Evaluating Predictive Models
### Remove NAs
df_qb_contracts_train_na_rm <- drop_na(df_qb_contracts_train)
df_qbs_contracts_train.bglm <- df_qb_contracts_train_na_rm[ , names(df_qb_contracts_train_na_rm) %in% c(pred_vars, "inflated_apy")]
num_vars <- length(pred_vars)
## Fit Best Subsets APY
regfit.full <- regsubsets(inflated_apy ~ ., data = df_qbs_contracts_train.bglm, method = "exhaustive", nvmax = num_vars)
reg.summary <- summary(regfit.full)
par(mfrow = c(2 , 2))
plot(reg.summary$rss, xlab = "Number of Variables", ylab = "RSS", type = "l")
plot(reg.summary$adjr2, xlab = "Number of Variables", ylab = "Adjusted RSq", type = "l")
max.adjr2.bs = which.max(reg.summary$adjr2)
points(max.adjr2.bs, reg.summary$adjr2[max.adjr2.bs], col = "red", cex = 2, pch = 20)
plot(reg.summary$cp, xlab = "Number of Variables", ylab = "Cp", type = "l")
min.cp.bs = which.min(reg.summary$cp)
points(min.cp.bs, reg.summary$cp[min.cp.bs], col = "red", cex = 2, pch = 20)
plot(reg.summary$bic, xlab = "Number of Variables", ylab = "BIC", type = "l")
min.bic.bs = which.min(reg.summary$bic)
points(min.bic.bs, reg.summary$bic[min.bic.bs], col = "red", cex = 2, pch = 20)
xvars <- dimnames(reg.summary$which)[[2]][-1]
responsevar <- "inflated_apy"
models_to_eval <- sort(unique(c(max.adjr2.bs, min.cp.bs, min.bic.bs)))
lst.bs.apy <- vector("list", dim(reg.summary$which)[1])
for (i in models_to_eval){
print(i)
id <- reg.summary$which[i, ]
form <- reformulate(xvars[which(id[-1])], responsevar, id[1])
lst.bs.apy[[i]] <- lm(form, df_qbs_contracts_train.bglm)
}
### Predict Best Subsets
apy.bs.adjr2.preds <- predict(lst.bs.apy[[max.adjr2.bs]], df_qb_contracts_test)
apy.bs.cp.preds <- predict(lst.bs.apy[[min.cp.bs]], df_qb_contracts_test)
apy.bs.bic.preds <- predict(lst.bs.apy[[min.bic.bs]], df_qb_contracts_test)
mse.bs.adjr2 <- c("APY","Best Subsets","Adj R^2",mean((df_qb_contracts_test$inflated_apy - apy.bs.adjr2.preds)^2))
mse.bs.cp <- c("APY","Best Subsets", "Cp",mean((df_qb_contracts_test$inflated_apy - apy.bs.cp.preds)^2))
mse.bs.bic <- c("APY","Best Subsets", "BIC",mean((df_qb_contracts_test$inflated_apy - apy.bs.bic.preds)^2))
## Fit Forward Stepwise APY
regfit.fwd <- regsubsets(inflated_apy ~ ., df_qbs_contracts_train.bglm, method = "forward", nvmax = num_vars)
reg.fwd.summary <- summary(regfit.fwd)
par(mfrow = c(2 , 2))
plot(reg.fwd.summary$rss, xlab = "Number of Variables", ylab = "RSS", type = "l")
plot(reg.fwd.summary$adjr2, xlab = "Number of Variables", ylab = "Adjusted RSq", type = "l")
max.adjr2.fwd = which.max(reg.fwd.summary$adjr2)
points(max.adjr2.fwd, reg.fwd.summary$adjr2[max.adjr2.fwd], col = "red", cex = 2, pch = 20)
plot(reg.fwd.summary$cp, xlab = "Number of Variables", ylab = "Cp", type = "l")
min.cp.fwd = which.min(reg.fwd.summary$cp)
points(min.cp.fwd, reg.fwd.summary$cp[min.cp.fwd], col = "red", cex = 2, pch = 20)
plot(reg.fwd.summary$bic, xlab = "Number of Variables", ylab = "BIC", type = "l")
min.bic.fwd = which.min(reg.fwd.summary$bic)
points(min.bic.fwd, reg.fwd.summary$bic[min.bic.fwd], col = "red", cex = 2, pch = 20)
xvars <- dimnames(reg.fwd.summary$which)[[2]][-1]
responsevar <- "inflated_apy"
models_to_eval <- sort(unique(c(max.adjr2.fwd, min.cp.fwd, min.bic.fwd)))
lst.fwd.apy <- vector("list", dim(reg.fwd.summary$which)[1])
for (i in models_to_eval){
print(i)
id <- reg.fwd.summary$which[i, ]
form <- reformulate(xvars[which(id[-1])], responsevar, id[1])
lst.fwd.apy[[i]] <- lm(form, df_qbs_contracts_train.bglm)
}
### Predict Forward Stepwise
apy.fwd.adjr2.preds <- predict(lst.fwd.apy[[max.adjr2.fwd]], df_qb_contracts_test)
apy.fwd.cp.preds <- predict(lst.fwd.apy[[min.cp.fwd]], df_qb_contracts_test)
apy.fwd.bic.preds <- predict(lst.fwd.apy[[min.bic.fwd]], df_qb_contracts_test)
mse.fwd.adjr2 <- c("APY","Forward Stepwise","Adj R^2",mean((df_qb_contracts_test$inflated_apy - apy.fwd.adjr2.preds)^2))
mse.fwd.cp <- c("APY","Forward Stepwise","Cp",mean((df_qb_contracts_test$inflated_apy - apy.fwd.cp.preds)^2))
mse.fwd.bic <- c("APY","Forward Stepwise","BIC",mean((df_qb_contracts_test$inflated_apy - apy.fwd.bic.preds)^2))
## Backward Stepwise APY
regfit.bwd <- regsubsets(inflated_apy ~ ., df_qbs_contracts_train.bglm, method = "backward", nvmax = num_vars)
reg.bwd.summary <- summary(regfit.bwd)
par(mfrow = c(2 , 2))
plot(reg.bwd.summary$rss, xlab = "Number of Variables", ylab = "RSS", type = "l")
plot(reg.bwd.summary$adjr2, xlab = "Number of Variables", ylab = "Adjusted RSq", type = "l")
max.adjr2.bwd = which.max(reg.bwd.summary$adjr2)
points(max.adjr2.bwd, reg.bwd.summary$adjr2[max.adjr2.bwd], col = "red", cex = 2, pch = 20)
plot(reg.bwd.summary$cp, xlab = "Number of Variables", ylab = "Cp", type = "l")
min.cp.bwd = which.min(reg.bwd.summary$cp)
points(min.cp.bwd, reg.bwd.summary$cp[min.cp.bwd], col = "red", cex = 2, pch = 20)
plot(reg.bwd.summary$bic, xlab = "Number of Variables", ylab = "BIC", type = "l")
min.bic.bwd = which.min(reg.bwd.summary$bic)
points(min.bic.bwd, reg.bwd.summary$bic[min.bic.bwd], col = "red", cex = 2, pch = 20)
xvars <- dimnames(reg.bwd.summary$which)[[2]][-1]
responsevar <- "inflated_apy"
models_to_eval <- sort(unique(c(max.adjr2.bwd, min.cp.bwd, min.bic.bwd)))
lst.bwd.apy <- vector("list", dim(reg.bwd.summary$which)[1])
for (i in models_to_eval){
print(i)
id <- reg.bwd.summary$which[i, ]
form <- reformulate(xvars[which(id[-1])], responsevar, id[1])
lst.bwd.apy[[i]] <- lm(form, df_qbs_contracts_train.bglm)
}
### Predict Backward Stepwise
apy.bwd.adjr2.preds <- predict(lst.bwd.apy[[max.adjr2.bwd]], df_qb_contracts_test)
apy.bwd.cp.preds <- predict(lst.bwd.apy[[min.cp.bwd]], df_qb_contracts_test)
apy.bwd.bic.preds <- predict(lst.bwd.apy[[min.bic.bwd]], df_qb_contracts_test)
mse.bwd.adjr2 <- c("APY","Best Subsets","Adj R^2",mean((df_qb_contracts_test$inflated_apy - apy.bwd.adjr2.preds)^2))
mse.bwd.cp <- c("APY","Best Subsets","Cp",mean((df_qb_contracts_test$inflated_apy - apy.bwd.cp.preds)^2))
mse.bwd.bic <- c("APY","Best Subsets","BIC",mean((df_qb_contracts_test$inflated_apy - apy.bwd.bic.preds)^2))
## Fit Best Subsets Years
df_qbs_contracts_train.bglm <- df_qb_contracts_train_na_rm[ , names(df_qb_contracts_train_na_rm) %in% c(pred_vars, "years")]
regfit.full.years <- regsubsets(years ~ ., data = df_qbs_contracts_train.bglm, method = "exhaustive", nvmax = num_vars)
reg.summary.years <- summary(regfit.full.years)
par(mfrow = c(2 , 2))
plot(reg.summary.years$rss, xlab = "Number of Variables", ylab = "RSS", type = "l")
plot(reg.summary.years$adjr2, xlab = "Number of Variables", ylab = "Adjusted RSq", type = "l")
max.adjr2.bs.years = which.max(reg.summary.years$adjr2)
points(max.adjr2.bs.years, reg.summary.years$adjr2[max.adjr2.bs.years], col = "red", cex = 2, pch = 20)
plot(reg.summary.years$cp, xlab = "Number of Variables", ylab = "Cp", type = "l")
min.cp.bs.years = which.min(reg.summary.years$cp)
points(min.cp.bs.years, reg.summary.years$cp[min.cp.bs.years], col = "red", cex = 2, pch = 20)
plot(reg.summary.years$bic, xlab = "Number of Variables", ylab = "BIC", type = "l")
min.bic.bs.years = which.min(reg.summary.years$bic)
points(min.bic.bs.years, reg.summary.years$bic[min.bic.bs.years], col = "red", cex = 2, pch = 20)
xvars <- dimnames(reg.summary.years$which)[[2]][-1]
responsevar <- "years"
models_to_eval <- sort(unique(c(max.adjr2.bs.years, min.cp.bs.years, min.bic.bs.years)))
lst.bs.years <- vector("list", dim(reg.summary.years$which)[1])
for (i in models_to_eval){
print(i)
id <- reg.summary.years$which[i, ]
form <- reformulate(xvars[which(id[-1])], responsevar, id[1])
lst.bs.years[[i]] <- lm(form, df_qbs_contracts_train.bglm)
}
### Predict Best Subsets Years
years.bs.adjr2.preds <- predict(lst.bs.years[[max.adjr2.bs.years]], df_qb_contracts_test)
years.bs.cp.preds <- predict(lst.bs.years[[min.cp.bs.years]], df_qb_contracts_test)
years.bs.bic.preds <- predict(lst.bs.years[[min.bic.bs.years]], df_qb_contracts_test)
mse.years.bs.adjr2 <- c("Years","Best Subsets","Adj R^2",mean((df_qb_contracts_test$years - years.bs.adjr2.preds)^2, na.rm=TRUE))
mse.years.bs.cp <- c("Years","Best Subsets", "Cp",mean((df_qb_contracts_test$years - years.bs.cp.preds)^2,na.rm=TRUE))
mse.years.bs.bic <- c("Years","Best Subsets", "BIC",mean((df_qb_contracts_test$years - years.bs.bic.preds)^2,na.rm=TRUE))
## Forward Stepwise Fitting Years
df_qbs_contracts_train.bglm <- df_qb_contracts_train_na_rm[ , names(df_qb_contracts_train_na_rm) %in% c(pred_vars, "years")]
regfit.fwd.years <- regsubsets(years ~ ., df_qbs_contracts_train.bglm, method = "forward", nvmax = num_vars)
reg.fwd.years.summary <- summary(regfit.fwd.years)
par(mfrow = c(2 , 2))
plot(reg.fwd.years.summary$rss, xlab = "Number of Variables", ylab = "RSS", type = "l")
plot(reg.fwd.years.summary$adjr2, xlab = "Number of Variables", ylab = "Adjusted RSq", type = "l")
max.adjr2.fwd.years = which.max(reg.fwd.years.summary$adjr2)
points(max.adjr2.fwd.years, reg.fwd.years.summary$adjr2[max.adjr2.fwd.years], col = "red", cex = 2, pch = 20)
plot(reg.fwd.years.summary$cp, xlab = "Number of Variables", ylab = "Cp", type = "l")
min.cp.fwd.years = which.min(reg.fwd.years.summary$cp)
points(min.cp.fwd.years, reg.fwd.years.summary$cp[min.cp.fwd.years], col = "red", cex = 2, pch = 20)
plot(reg.fwd.years.summary$bic, xlab = "Number of Variables", ylab = "BIC", type = "l")
min.bic.fwd.years = which.min(reg.fwd.years.summary$bic)
points(min.bic.fwd.years, reg.fwd.years.summary$bic[min.bic.fwd.years], col = "red", cex = 2, pch = 20)
xvars <- dimnames(reg.fwd.years.summary$which)[[2]][-1]
responsevar <- "years"
models_to_eval <- sort(unique(c(max.adjr2.fwd.years, min.cp.fwd.years, min.bic.fwd.years)))
lst.fwd.years <- vector("list", dim(reg.fwd.years.summary$which)[1])
for (i in models_to_eval){
print(i)
id <- reg.fwd.years.summary$which[i, ]
form <- reformulate(xvars[which(id[-1])], responsevar, id[1])
lst.fwd.years[[i]] <- lm(form, df_qbs_contracts_train.bglm)
}
### Predict Forward Stepwise Years
years.fwd.adjr2.preds <- predict(lst.fwd.years[[max.adjr2.fwd.years]], df_qb_contracts_test)
years.fwd.cp.preds <- predict(lst.fwd.years[[min.cp.fwd.years]], df_qb_contracts_test)
years.fwd.bic.preds <- predict(lst.fwd.years[[min.bic.fwd.years]], df_qb_contracts_test)
mse.years.fwd.adjr2 <- c("Years","Forward Stepwise","Adj R^2",mean((df_qb_contracts_test$years - years.fwd.adjr2.preds)^2, na.rm=TRUE))
mse.years.fwd.cp <- c("Years","Forward Stepwise","Cp",mean((df_qb_contracts_test$years - years.fwd.cp.preds)^2, na.rm=TRUE))
mse.years.fwd.bic <- c("Years","Forward Stepwise","BIC",mean((df_qb_contracts_test$years - years.fwd.bic.preds)^2, na.rm=TRUE))
## Backward Stepwise Fitting Years
df_qbs_contracts_train.bglm <- df_qb_contracts_train_na_rm[ , names(df_qb_contracts_train_na_rm) %in% c(pred_vars, "years")]
regfit.bwd.years <- regsubsets(years ~ ., df_qbs_contracts_train.bglm, method = "backward", nvmax = num_vars)
reg.bwd.years.summary <- summary(regfit.bwd.years)
par(mfrow = c(2 , 2))
plot(reg.bwd.years.summary$rss, xlab = "Number of Variables", ylab = "RSS", type = "l")
plot(reg.bwd.years.summary$adjr2, xlab = "Number of Variables", ylab = "Adjusted RSq", type = "l")
max.adjr2.bwd.years = which.max(reg.bwd.years.summary$adjr2)
points(max.adjr2.bwd.years, reg.bwd.years.summary$adjr2[max.adjr2.bwd.years], col = "red", cex = 2, pch = 20)
plot(reg.bwd.years.summary$cp, xlab = "Number of Variables", ylab = "Cp", type = "l")
min.cp.bwd.years = which.min(reg.bwd.years.summary$cp)
points(min.cp.bwd.years, reg.bwd.years.summary$cp[min.cp.bwd.years], col = "red", cex = 2, pch = 20)
plot(reg.bwd.years.summary$bic, xlab = "Number of Variables", ylab = "BIC", type = "l")
min.bic.bwd.years = which.min(reg.bwd.years.summary$bic)
points(min.bic.bwd.years, reg.bwd.years.summary$bic[min.bic.bwd.years], col = "red", cex = 2, pch = 20)
xvars <- dimnames(reg.bwd.years.summary$which)[[2]][-1]
responsevar <- "years"
models_to_eval <- sort(unique(c(max.adjr2.bwd.years, min.cp.bwd.years, min.bic.bwd.years)))
lst.bwd.years <- vector("list", dim(reg.bwd.years.summary$which)[1])
for (i in models_to_eval){
print(i)
id <- reg.bwd.years.summary$which[i, ]
form <- reformulate(xvars[which(id[-1])], responsevar, id[1])
lst.bwd.years[[i]] <- lm(form, df_qbs_contracts_train.bglm)
}
### Predict Backward Stepwise Years
years.bwd.adjr2.preds <- predict(lst.bwd.years[[max.adjr2.bwd.years]], df_qb_contracts_test)
years.bwd.cp.preds <- predict(lst.bwd.years[[min.cp.bwd.years]], df_qb_contracts_test)
years.bwd.bic.preds <- predict(lst.bwd.years[[min.bic.bwd.years]], df_qb_contracts_test)
mse.years.bwd.adjr2 <- c("Years","Backward Stepwise","Adj R^2",mean((df_qb_contracts_test$years - years.bwd.adjr2.preds)^2, na.rm=TRUE))
mse.years.bwd.cp <- c("Years","Backward Stepwise","Cp",mean((df_qb_contracts_test$years - years.bwd.cp.preds)^2, na.rm=TRUE))
mse.years.bwd.bic <- c("Years","Backward Stepwise","BIC",mean((df_qb_contracts_test$years - years.bwd.bic.preds)^2, na.rm=TRUE))
## Lasso
### Log transforming data because of skewness/curvature.
df_qb_contracts_train_log <- cbind(as.data.frame(lapply(df_qb_contracts_train[, names(df_qb_contracts_train) %in% pred_vars], function(x) log(x - min(x, na.rm = TRUE) + 1))), df_qb_contracts_train$inflated_apy) %>% rename("inflated_apy" = "df_qb_contracts_train$inflated_apy")
rownames(df_qb_contracts_train_log) <- rownames(df_qb_contracts_train)
df_qb_contracts_test_log <- cbind(as.data.frame(lapply(df_qb_contracts_test[, names(df_qb_contracts_test) %in% pred_vars], function(x) log(x - min(x, na.rm = TRUE) + 1))), df_qb_contracts_test$inflated_apy) %>% rename("inflated_apy" = "df_qb_contracts_test$inflated_apy")
rownames(df_qb_contracts_test_log) <- rownames(df_qb_contracts_test)
par(mfrow = c(2, 2))
plot(df_qb_contracts_train$primary_passing_tds_per_game, df_qb_contracts_train$inflated_apy)
plot(df_qb_contracts_train$primary_rushing_tds_per_game, df_qb_contracts_train$inflated_apy)
plot(df_qb_contracts_train$turnovers_per_attempt, df_qb_contracts_train$inflated_apy)
plot(df_qb_contracts_train$days_to_hurts_game, df_qb_contracts_train$inflated_apy)
plot(df_qb_contracts_train_log$primary_passing_tds_per_game, df_qb_contracts_train$inflated_apy)
plot(df_qb_contracts_train_log$primary_rushing_tds_per_game, df_qb_contracts_train$inflated_apy)
plot(df_qb_contracts_train_log$turnovers_per_attempt, df_qb_contracts_train$inflated_apy)
plot(df_qb_contracts_train_log$days_to_hurts_game, df_qb_contracts_train$inflated_apy)
### Scaled versions of training and test data.
normParam <- preProcess(df_qb_contracts_train[ , names(df_qb_contracts_train) %in% pred_vars])
df_qbs_contracts_train_scaled <- predict(normParam, df_qb_contracts_train)
df_qbs_contracts_test_scaled <- predict(normParam, df_qb_contracts_test)
x.train <- data.matrix(df_qbs_contracts_train_scaled[, names(df_qbs_contracts_train_scaled) %in% pred_vars])
y.train <- data.matrix(df_qbs_contracts_train_scaled[, c('inflated_apy')])
### Storing the number of rows into a variable
x.train.rows <- dim(x.train)[1]
### Fit with a LOOCV by defining the folds as the number of rows in the training data.
grid <- 10^seq (10, -2, length = 1000)
lasso.fit <- cv.glmnet(x.train, y.train, family = "gaussian", alpha = 1, lambda = grid, nfolds = x.train.rows)
par(mfrow = c(1 , 1))
plot(lasso.fit, xvar="lambda", label=TRUE)
plot(lasso.fit$glmnet.fit, "norm", label=TRUE)
plot(lasso.fit$glmnet.fit, "lambda", label=TRUE)
bestlam.lasso.apy <- lasso.fit$lambda.min
x.test <- data.matrix(df_qbs_contracts_test_scaled[ , names(df_qbs_contracts_train_scaled) %in% pred_vars])
y.test <- data.matrix(df_qbs_contracts_test_scaled[, c('inflated_apy')])
lasso.preds <- predict(lasso.fit, s = bestlam.lasso.apy, newx = x.test)
mse.lasso.apy <- c("APY","Lasso","N/A",mean((lasso.preds - df_qb_contracts_test$inflated_apy)^2))
coef(lasso.fit, s = bestlam.lasso.apy)
#### Fitting and Predicting number of years on the contract (Lasso)
x.train.years <- data.matrix(df_qbs_contracts_train_scaled[, names(df_qbs_contracts_train_scaled) %in% pred_vars])
y.train.years <- data.matrix(df_qbs_contracts_train_scaled[, c('years')])
x.train.rows <- dim(x.train.years)[1]
grid <- 10^seq (10, -1.7, length = 1000)
lasso.fit.years <- cv.glmnet(x.train.years, y.train.years, family = "gaussian", alpha = 1, lambda = grid, nfolds = x.train.rows)
par(mfrow = c(1 , 1))
plot(lasso.fit.years, xvar="lambda", label=TRUE)
plot(lasso.fit.years$glmnet.fit, "norm", label=TRUE)
plot(lasso.fit.years$glmnet.fit, "lambda", label=TRUE)
bestlam <- lasso.fit.years$lambda.min
x.test.years <- data.matrix(df_qbs_contracts_test_scaled[, names(df_qbs_contracts_test_scaled) %in% pred_vars])
y.test.years <- data.matrix(df_qbs_contracts_test_scaled[, c('years')])
lasso.preds.years <- predict(lasso.fit.years, s = bestlam, newx = x.test.years)
mse.lasso.years <- c("Years","Lasso","N/A",mean((lasso.preds.years - df_qb_contracts_test$years)^2))
coef(lasso.fit.years, s = bestlam)
## Ridge Regression
grid <- 10^seq (10, -2, length = 1000)
rr.fit <- cv.glmnet(x.train, y.train, family = "gaussian", alpha = 0, lambda = grid, nfolds = x.train.rows)
par(mfrow = c(1 , 1))
plot(rr.fit, xvar="lambda", label=TRUE)
plot(rr.fit$glmnet.fit, "norm", label=TRUE)
plot(rr.fit$glmnet.fit, "lambda", label=TRUE)
bestlam <- rr.fit$lambda.min
x.test <- data.matrix(df_qbs_contracts_test_scaled[, names(df_qbs_contracts_test_scaled) %in% pred_vars])
y.test <- data.matrix(df_qbs_contracts_test_scaled[, c('inflated_apy')])
rr.preds <- predict(rr.fit, s = bestlam, newx = x.test)
mse.rr.apy <- c("APY","Ridge Regression","N/A",mean((rr.preds - df_qb_contracts_test$inflated_apy)^2))
coef(rr.fit, s = bestlam)
#### Fitting and Predicting Number of Years on Contract (Ridge Regression)
x.train.years <- data.matrix(df_qbs_contracts_train_scaled[, names(df_qbs_contracts_train_scaled) %in% pred_vars])
y.train.years <- data.matrix(df_qbs_contracts_train_scaled[, c('years')])
x.train.rows <- dim(x.train.years)[1]
grid <- 10^seq (10, -2, length = 1000)
rr.fit.years <- cv.glmnet(x.train.years, y.train.years, family = "gaussian", alpha = 0, lambda = grid, nfolds = x.train.rows)
par(mfrow = c(1 , 1))
plot(rr.fit.years, xvar="lambda", label=TRUE)
plot(rr.fit.years$glmnet.fit, "norm", label=TRUE)
plot(rr.fit.years$glmnet.fit, "lambda", label=TRUE)
bestlam <- rr.fit.years$lambda.min
x.test.years <- data.matrix(df_qbs_contracts_test_scaled[, names(df_qbs_contracts_test_scaled) %in% pred_vars])
y.test.years <- data.matrix(df_qbs_contracts_test_scaled[, c('years')])
rr.preds.years <- predict(rr.fit.years, s = bestlam, newx = x.test.years)
mse.rr.years <- c("Years","Ridge Regression","N/A",mean((rr.preds.years - df_qb_contracts_test$years)^2))
coef(lasso.fit.years, s = bestlam)
# Model Selection
## APY
df_accuracy_apy <- data.frame(rbind(mse.bs.adjr2,
mse.bs.cp,
mse.bs.bic,
mse.fwd.adjr2,
mse.fwd.cp,
mse.fwd.bic,
mse.bwd.adjr2,
mse.bwd.cp,
mse.bwd.bic,
mse.lasso.apy,
mse.rr.apy
))
colnames(df_accuracy_apy) <- c("Response", "Variable Selection Method", "Information Criteria", "MSE")
df_accuracy_apy$MSE <- as.numeric(df_accuracy_apy$MSE)
df_accuracy_apy %>% arrange(MSE)
## Years
df_accuracy_years <- data.frame(rbind(mse.years.bs.adjr2,
mse.years.bs.cp,
mse.years.bs.bic,
mse.years.fwd.adjr2,
mse.years.fwd.cp,
mse.years.fwd.bic,
mse.years.bwd.adjr2,
mse.years.bwd.cp,
mse.years.bwd.bic,
mse.lasso.years,
mse.rr.years
))
colnames(df_accuracy_years) <- c("Response", "Variable Selection Method", "Information Criteria", "MSE")
df_accuracy_years$MSE <- as.numeric(df_accuracy_years$MSE)
df_accuracy_years %>% arrange(MSE)
# Check Winning Model's Assumptions (Example here: http://www.sthda.com/english/articles/39-regression-model-diagnostics/161-linear-regression-assumptions-and-diagnostics-in-r-essentials/)
par(mfrow = c(2, 2))
plot(lst.fwd.apy[[min.bic.fwd]])
plot(lst.fwd.years[[min.bic.fwd.years]])
# Predict Hurts
predict(lst.fwd.apy[[min.bic.fwd]], df_qb_contracts_hurts, interval="predict") # 40.91069
predict(lst.fwd.years[[min.bic.fwd.years]], df_qb_contracts_hurts, interval="predict")
